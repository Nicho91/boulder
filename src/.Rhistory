setwd("~/Desktop/MoWater/boulder/src")
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
load("../data/phosPrediction.rda")
View(phosfax.hrly)
View(phos.data)
colnames(phos.data)
sort(colnames(phos.data))
library(DataExplorer)
plot_missing(phos.data)
phos.data <- phos.data %>% select(-del)
del <- c("date", "delta_pct", "detla_mg_p_l", "influent_mgd_daily_avg", "primary_sludge_gmp_daily_avg", "twas_flow_gpm_daily_avg")
phos.data <- phos.data %>% select(-del)
phos.data <- phos.data %>% select(-all_of(del))
library(tidyverse)
library(fields)
library(lubridate)
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l", "influent_mgd_daily_avg", "primary_sludge_gmp_daily_avg", "twas_flow_gpm_daily_avg")
phos.data <- phos.data %>% select(-all_of(del))
View(phos.data)
plot_missing(phos.data)
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
# make sure src is the current working directory
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l", "influent_mgd_daily_avg", "primary_sludge_gmp_daily_avg", "twas_flow_gpm_daily_avg")
phos.data.clean <- phos.data %>% select(-all_of(del))
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data)
num.vars <- length(colnames(phos.data.clean))
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.erros <-1 matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
cv.erros <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
colnames(phos.data)[3]
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
# make sure src is the current working directory
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data)
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.errors <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
for ( j in 1:k ) {
best.fit <- regsubsets(op_mg_p_l ~ ., data = phos.data.clean[folds != j,], nvmax = num.vars)
testmat <- model.matrix(op_mg_p_l ~ ., data = phos.data.clean[folds == j,])
for ( i in 1:num.vars ) {
coefi <- coef(best.fit, id = i)
xvars <- colnames(coefi)
pred <- testmat[,xvars] %*% coefi
cv.errors[j, i] <- mean( (phos.data.clean$op_mg_p_l[folds == j] - pred)^2 , na.rm = TRUE)
}
}
msep <- apply(cv.errors, 2, mean, na.rm = TRUE)
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data.clean)
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.errors <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
for ( j in 1:k ) {
best.fit <- regsubsets(op_mg_p_l ~ ., data = phos.data.clean[folds != j,], nvmax = num.vars)
testmat <- model.matrix(op_mg_p_l ~ ., data = phos.data.clean[folds == j,])
for ( i in 1:num.vars ) {
coefi <- coef(best.fit, id = i)
xvars <- colnames(coefi)
pred <- testmat[,xvars] %*% coefi
cv.errors[j, i] <- mean( (phos.data.clean$op_mg_p_l[folds == j] - pred)^2 , na.rm = TRUE)
}
}
lm(op_mg_p_l ~ ., data = phos.data.clean)
install.packages("Smisc")
install.packages("caret")
library(caret)
findLinearCombos(phos.data.clean)
names(phos.data.clean)
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
# make sure src is the current working directory
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l", "daft_sub_gpm", "daft_sub_gal")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data.clean)
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.errors <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
for ( j in 1:k ) {
best.fit <- regsubsets(op_mg_p_l ~ ., data = phos.data.clean[folds != j,], nvmax = num.vars)
testmat <- model.matrix(op_mg_p_l ~ ., data = phos.data.clean[folds == j,])
for ( i in 1:num.vars ) {
coefi <- coef(best.fit, id = i)
xvars <- colnames(coefi)
pred <- testmat[,xvars] %*% coefi
cv.errors[j, i] <- mean( (phos.data.clean$op_mg_p_l[folds == j] - pred)^2 , na.rm = TRUE)
}
}
msep <- apply(cv.errors, 2, mean, na.rm = TRUE)
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
# make sure src is the current working directory
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l", "daft_sub_gpm", "daft_sub_gal")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data.clean)
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.errors <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
for ( j in 1:k ) {
best.fit <- regsubsets(op_mg_p_l ~ ., data = phos.data.clean[folds != j,], nvmax = num.vars-2)
testmat <- model.matrix(op_mg_p_l ~ ., data = phos.data.clean[folds == j,])
for ( i in 1:num.vars ) {
coefi <- coef(best.fit, id = i)
xvars <- colnames(coefi)
pred <- testmat[,xvars] %*% coefi
cv.errors[j, i] <- mean( (phos.data.clean$op_mg_p_l[folds == j] - pred)^2 , na.rm = TRUE)
}
}
msep <- apply(cv.errors, 2, mean, na.rm = TRUE)
View(phos.data.clean)
3.1144*4
plot_missing(phos.data.clean)
rm( list = ls() )
library(tidyverse)
library(fields)
library(lubridate)
library(leaps)
# make sure src is the current working directory
load("../data/phosPrediction.rda")
del <- c("date", "delta_pct", "detla_mg_p_l", "daft_sub_gpm", "daft_sub_gal")
phos.data.clean <- phos.data %>% select(-all_of(del))
set.seed(1)
k <- 10
n <- nrow(phos.data.clean)
num.vars <- length(colnames(phos.data.clean)) - 1
folds <- sample(1:k, n, replace = TRUE)
cv.errors <- matrix(NA, k, num.vars, dimnames = list(NULL, c(1:num.vars)))
for ( j in 1:k ) {
best.fit <- regsubsets(op_mg_p_l ~ ., data = phos.data.clean[folds != j,], nvmax = num.vars-2)
testmat <- model.matrix(op_mg_p_l ~ ., data = phos.data.clean[folds == j,])
for ( i in 1:num.vars ) {
coefi <- coef(best.fit, id = i)
xvars <- colnames(coefi)
pred <- testmat[,xvars] %*% coefi
cv.errors[j, i] <- mean( (phos.data.clean$op_mg_p_l[folds == j] - pred)^2 , na.rm = TRUE)
}
}
msep <- apply(cv.errors, 2, mean, na.rm = TRUE)
View(phos.data.clean)
